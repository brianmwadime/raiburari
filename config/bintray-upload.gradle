/*
 * Copyright (c) 2015 Henry Addo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Upload artifact to bintray
def siteUrl = 'https://bitbucket.org/eyedol/raiburari'
// Homepage URL of the library
def gitUrl = 'https://eyedol@bitbucket.org/eyedol/raiburari.git'
// Git repository URL
def issueUrl = 'https://bitbucket.org/eyedol/raiburari/issues'
group = "com.addhen.android" // Maven Group ID for the artifact

def libVersion = rootProject.extensions.getByName("ext").getAt("androidVersionName")

version = libVersion

install {
  repositories.mavenInstaller {
    // This generates POM.xml with proper parameters
    pom {
      project {
        packaging pkg
        // Add your description here
        name artifact.toString()
        description = blob
        url siteUrl
        // Set your license
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id 'eyedol'
            name 'Henry Addo'
            email 'henry@addhen.org'
          }
        }
        scm {
          connection gitUrl
          developerConnection gitUrl
          url siteUrl
        }
      }
    }
  }
}

if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
    hasPlugin('com.android.library')) {
  task androidJavadocs(type: Javadoc) {
    failOnError false // Don't fail on error
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }
} else {
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
}

artifacts {
  if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
      hasPlugin('com.android.library')) {
    archives androidSourcesJar
    archives androidJavadocsJar
  } else {
    archives sourcesJar
    archives javadocJar
  }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// https://github.com/bintray/gradle-bintray-plugin
bintray {
  user = property('bintrayUser')
  key = property('bintrayKey')

  configurations = ['archives']
  pkg {
    repo = "maven"
    // it is the name that appears in bintray when logged
    name = artifact
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    issueTrackerUrl = issueUrl
    licenses = ["Apache-2.0"]
    labels = ['android', 'java', 'clean-architecture']
    publicDownloadNumbers = true
    publish = true
    desc = blob
    githubRepo = 'eyedol/Raiburari' //Optional Github repository
    githubReleaseNotesFile = 'CHANGELOG.md'
    version {
      name = libVersion
      vcsTag = libVersion
      released = new Date()
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = properties.getProperty('gpgPassword')
        //Optional. The passphrase for GPG signing'
      }
      mavenCentralSync {
        sync = true
        //Optional (true by default). Determines whether to sync the version to Maven Central.
        user = properties.getProperty('ossUser') //OSS user token
        password = properties.getProperty('ossPassword') //OSS user password
        close = '1'
        //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
      }
    }
  }
}

artifactory {
  contextUrl = 'https://oss.jfrog.info/artifactory'
  publish {
    repository {
      // The Artifactory repository key to publish to
      repoKey = artifactVersion.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
      username = property('bintrayUser') // The publisher user name
      password = property('bintrayKey') // The publisher password
      maven = true
    }
    defaults {
      publishArtifacts = true
      publications('aar')
      publishPom = true //Publish generated POM files to Artifactory (true by default)
      publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
}